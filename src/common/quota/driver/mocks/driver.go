// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import driver "github.com/goharbor/harbor/src/common/quota/driver"
import mock "github.com/stretchr/testify/mock"
import types "github.com/goharbor/harbor/src/pkg/types"

// Driver is an autogenerated mock type for the Driver type
type Driver struct {
	mock.Mock
}

// HardLimits provides a mock function with given fields:
func (_m *Driver) HardLimits() types.ResourceList {
	ret := _m.Called()

	var r0 types.ResourceList
	if rf, ok := ret.Get(0).(func() types.ResourceList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ResourceList)
		}
	}

	return r0
}

// Load provides a mock function with given fields: key
func (_m *Driver) Load(key string) (driver.RefObject, error) {
	ret := _m.Called(key)

	var r0 driver.RefObject
	if rf, ok := ret.Get(0).(func(string) driver.RefObject); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.RefObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: resources
func (_m *Driver) Validate(resources types.ResourceList) error {
	ret := _m.Called(resources)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.ResourceList) error); ok {
		r0 = rf(resources)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
